import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from config import BOT_TOKEN
from database import get_session, close_session
from models.models import User, Habit, Progress, HabitType
from utils.reminders import ReminderManager
from handlers.commands import (
    done_habit, skip_habit, show_stats,
    stats_callback, set_reminder
)
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    session = get_session()
    try:
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        if not user:
            user = User(
                telegram_id=update.effective_user.id,
                username=update.effective_user.username
            )
            session.add(user)
            session.commit()
        
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add_habit - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É\n"
            "/list_habits - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n"
            "/done <id> - –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n"
            "/skip <id> - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            "/reminder <id> <–≤—Ä–µ–º—è> - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "/help - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
        )
    finally:
        close_session()

async def add_habit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_habit"""
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_habit \"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏\" [daily|times_per_day|weekly] [—Ü–µ–ª—å]"
        )
        return

    session = get_session()
    try:
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return

        name = context.args[0].strip('"')
        habit_type = context.args[1] if len(context.args) > 1 else "daily"
        target = int(context.args[2]) if len(context.args) > 2 else 1

        habit = Habit(
            user_id=user.id,
            name=name,
            type=HabitType(habit_type),
            target=target,
            reminder_times=json.dumps(["09:00", "21:00"])
        )
        session.add(habit)
        session.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        context.bot_data['reminder_manager'].update_reminder(
            habit.id,
            json.loads(habit.reminder_times)
        )

        await update.message.reply_text(
            f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ ¬´{name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"–¢–∏–ø: {habit_type}\n"
            f"–¶–µ–ª—å: {target} —Ä–∞–∑ –≤ {'–¥–µ–Ω—å' if habit_type != 'weekly' else '–Ω–µ–¥–µ–ª—é'}\n\n"
            f"ID –ø—Ä–∏–≤—ã—á–∫–∏: {habit.id}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )
    finally:
        close_session()

async def list_habits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_habits"""
    session = get_session()
    try:
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return

        habits = session.query(Habit).filter_by(user_id=user.id).all()
        if not habits:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /add_habit")
            return

        message = "üìã –í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
        for habit in habits:
            message += f"‚Ä¢ {habit.name} (ID: {habit.id})\n"
            message += f"  –¢–∏–ø: {habit.type.value}\n"
            message += f"  –¶–µ–ª—å: {habit.target} —Ä–∞–∑ –≤ {'–¥–µ–Ω—å' if habit.type != HabitType.WEEKLY else '–Ω–µ–¥–µ–ª—é'}\n"
            message += f"  –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {', '.join(json.loads(habit.reminder_times))}\n\n"

        await update.message.reply_text(message)
    finally:
        close_session()

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/add_habit \"–ù–∞–∑–≤–∞–Ω–∏–µ\" [—Ç–∏–ø] [—Ü–µ–ª—å] - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n"
        "  –¢–∏–ø—ã: daily, times_per_day, weekly\n"
        "  –ü—Ä–∏–º–µ—Ä: /add_habit \"–ß–∏—Ç–∞—Ç—å\" daily 1\n"
        "/list_habits - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "/done <id> - –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n"
        "/skip <id> - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/reminder <id> <–≤—Ä–µ–º—è> - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "  –ü—Ä–∏–º–µ—Ä: /reminder 1 09:00 21:00\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    application.bot_data['reminder_manager'] = ReminderManager(application.bot)
    application.bot_data['reminder_manager'].setup_reminders()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_habit", add_habit))
    application.add_handler(CommandHandler("list_habits", list_habits))
    application.add_handler(CommandHandler("done", done_habit))
    application.add_handler(CommandHandler("skip", skip_habit))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("reminder", set_reminder))
    application.add_handler(CommandHandler("help", help_command))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(stats_callback, pattern="^stats_"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main() 